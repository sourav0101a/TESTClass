    public void execute(Database.BatchableContext BC, List<API_Staging_Table__c> scope) {
        
        system.debug('Inside execute ContractRenewalAPRBatch');
        Set<String> setPricebookEntryId = new Set<String>();
        Map<String, API_Staging_Table__c> subsToAPIRecordMap = new Map<String, API_Staging_Table__c>();
        Map<String, API_Staging_Table__c> AffsToAPIRecordMap = new Map<String, API_Staging_Table__c>();
        Map<String, List<PI_Rate_Staging__c>> piRatesMap = new Map<String, List<PI_Rate_Staging__c>>();
        Map<String, List<SBQQ__Subscription__c>> MDQSubsMap = new Map<String, List<SBQQ__Subscription__c>>();
        Map<String, List<Segment_Allocation_Detail__c  >> AfftoSegAllocMap = new Map<String, List<Segment_Allocation_Detail__c  >>();
        List<String> usageParentSubs = new List<String>();
        List<SBQQ__SubscriptionConsumptionRate__c> scRatesToUpdate = new List<SBQQ__SubscriptionConsumptionRate__c>();
        Map<String, List<PI_Rate_Staging__c>> subRatesMap = new Map<String, List<PI_Rate_Staging__c>>();
        List<API_Staging_Table__c> apiToUpdateList = new List<API_Staging_Table__c>();
        List<API_Staging_Table__c> apiDuplicates = new List<API_Staging_Table__c>();
        Map<String, PricebookEntry> mapPricebookEntry = new Map<String, PricebookEntry>();
        List<PricebookEntry> pbeRecord = new List<PricebookEntry>();
        List<SBQQ__Subscription__c> lstSubs = new List<SBQQ__Subscription__c>();
        List<SBQQ__Subscription__c> lstSubsAll = new List<SBQQ__Subscription__c>();
        List<SBQQ__Subscription__c> lstSegAllocSubs  = new List<SBQQ__Subscription__c>();
        List<Affiliate_Details__c > lstAffls = new List<Affiliate_Details__c >();
        List<Affiliate_Details__c > lstAfflsAll = new List<Affiliate_Details__c >();
        List<Segment_Allocation_Detail__c > lstSegAlloc = new List<Segment_Allocation_Detail__c   >();
        List<SBQQ__Subscription__c> renewalSubList = new List<SBQQ__Subscription__c>();
        Map<Id, SBQQ__Subscription__c> mapSegAllocSubs = new Map<Id, SBQQ__Subscription__c>();
        Map<Id, SBQQ__Subscription__c> mapExistingSubUpdate = new Map<Id, SBQQ__Subscription__c>(); 
        Map<Id, Id> mapSegAllocAff = new Map<Id, Id>();
        Map<Id, SBQQ__Subscription__c> renewalSubMap = new Map<Id, SBQQ__Subscription__c>();
        Map<Id, Segment_Allocation_Detail__c> mapExistingSegAllocUpdate = new Map<Id, Segment_Allocation_Detail__c>();
         Map<Id, Affiliate_Details__c > mapAffDetailsUpdate = new Map<Id, Affiliate_Details__c >();
        Map<Id,Map<Id,Decimal>> mapSubstoAffiliate = new Map<Id,Map<Id,Decimal>>();
        Map<String, Decimal> subToQuantityMap = new Map<String, Decimal>();
        List<SBQQ__Subscription__c> twoNewParentSubs = new List<SBQQ__Subscription__c>();
        List<SBQQ__Subscription__c> twoNewChildSubs = new List<SBQQ__Subscription__c>();
        List<SBQQ__Subscription__c> parentSubs = new List<SBQQ__Subscription__c>();
        List<Id> parentRenewalSubs = new List<Id>();
        List<SBQQ__Subscription__c> childSubs = new List<SBQQ__Subscription__c>();
        Map<String, String> oldtoNewParentSubIdMap = new Map<String, String>();
        Map<String, String> clonedUsageSubMap = new Map<String, String>();
        Map<String, SBQQ__Subscription__c> createSubsPositionMap = new Map<String, SBQQ__Subscription__c>();
        List<API_Staging_Table__c> apiLogList = new List<API_Staging_Table__c>();
        Map<String, Decimal> fromCurrency = new Map<String, Decimal>();
        Map<String, Decimal> toCurrency = new Map<String, Decimal>();
        Map<String, String> mapRenewedOldSubId = new Map<String, String>();
        Set<Id> duplicateSubsId = new Set<Id>();
        Set<Id> SubIdsforSegmentAllocSet = new Set<Id>();
        List<SBQQ__Subscription__c> subsForMRR = new List<SBQQ__Subscription__c>();
        List<SBQQ__Subscription__c> lstChildSubs = new List < SBQQ__Subscription__c >();  // QPA-25037
        Map<ID,list<SBQQ__Subscription__c>> mapOfPsIdToCsList = new Map<ID, list<SBQQ__Subscription__c>>();  // QPA-25037
        TriggerUtility.objectNames.add('SBQQ__Quote__c'); // To avoid 201 too many soql
        TriggerUtility.objectNames.add('SBQQ__QuoteLine__c'); // To avoid 201 too many soql
        TriggerUtility.objectNames.add('SBQQ__Subscription__c'); // To avoid 201 too many soql
        TriggerUtility.objectNames.add('Contract'); // To avoid 201 too many soql
        SBQQ.TriggerControl.disable();
        
        Set<String> SubSourceRefids = new Set<String>();
        Set<String> AffSourceRefids = new Set<String>();
        Set<String> allSourceRefids = new Set<String>();
        Set<String> updatedSourceRefids = new Set<String>();
        Map<String, API_Staging_Table__c> mapSubsreftoStaging = new Map<String, API_Staging_Table__c>();
        Map<String, API_Staging_Table__c> mapAffsreftoStaging = new Map<String, API_Staging_Table__c>();
        Map<String, API_Staging_Table__c> mapAllreftoStaging = new Map<String, API_Staging_Table__c>();
        Map<String, List<SBQQ__Subscription__c> > mapSourceReftoSubLst = new Map<String, List<SBQQ__Subscription__c> >();
        Map<String, List<Affiliate_Details__c> > mapSourceReftoAffLst = new Map<String, List<Affiliate_Details__c> >();
        Map<Id, API_Staging_Table__c> mapFinalStagingData = new Map<Id, API_Staging_Table__c>();
        List<API_Staging_Table__c> scopeNewAPIStaging = new List<API_Staging_Table__c>();
        
        // Get Soiurce Ref Id's from Scope
        for(API_Staging_Table__c ast : scope) {
        
            if(ast.Source_Ref_ID__c!=null && ast.Source_Ref_ID__c!=''){
                allSourceRefids.add(ast.Source_Ref_ID__c);  
                mapAllreftoStaging.put(ast.Source_Ref_ID__c, ast);
            /*String myIdPrefix = String.valueOf(ast.Source_Ref_ID__c).substring(0,3);
                if(myIdPrefix.toLowercase() == 'aCv'){
                    SubSourceRefids.add(ast.Source_Ref_ID__c);
                    mapSubsreftoStaging.put(ast.Source_Ref_ID__c, ast);                 
                }else if(myIdPrefix.toLowercase() == 'aDM'){
                    AffSourceRefids.add(ast.Source_Ref_ID__c);
                    mapAffsreftoStaging.put(ast.Source_Ref_ID__c, ast);
                }*/
            }
        }
        system.debug('SubSourceRefids'+SubSourceRefids);
        system.debug('AffSourceRefids'+AffSourceRefids);
        system.debug('mapAffsreftoStaging'+mapAffsreftoStaging);
        
        // Step - Populate Subscription id from Source Ref Id
        List<String> contractRecType = new List<String>{'FTSE_Russell_B_I','Yield_Book' ,'Mergent'};
        String comm = 'Commercial';
        String subsoql_all =
            'select ' +
            String.join(subsfields, ',') +           
            ' from SBQQ__Subscription__c' +
            ' where Source_Reference__c IN:allSourceRefids And SBQQ__Contract__r.deal_Type__c = :comm and SBQQ__Contract__r.RecordType.DeveloperName IN :contractRecType order by SBQQ__StartDate__c';
        lstSubsAll = Database.query(String.escapeSingleQuotes(subsoql_all));
        
        for(SBQQ__Subscription__c subObj : lstSubsAll) {
                //Map sourceref to staging rec
                if (mapAllreftoStaging.containsKey(subObj.Source_Reference__c)){
                    mapSubsreftoStaging.put(subObj.Source_Reference__c, mapAllreftoStaging.get(subObj.Source_Reference__c)); 
                }   
                
                if (mapSourceReftoSubLst.containsKey(subObj.Source_Reference__c))
                {
                    mapSourceReftoSubLst.get(subObj.Source_Reference__c).add(subObj);                   
                }else {
                    mapSourceReftoSubLst.put(subObj.Source_Reference__c , new List<SBQQ__Subscription__c>{subObj} );
                }           
        }
        system.debug('mapSourceReftoSubLst=='+mapSourceReftoSubLst);
         // Step - Load Subscriptions & MDQ Sub to Maps
        for(String sourceRefObj : mapSourceReftoSubLst.keySet()) {
                List<SBQQ__Subscription__c> subsforSourceRef = mapSourceReftoSubLst.get(sourceRefObj);
                API_Staging_Table__c apiStgforSourceRef = mapSubsreftoStaging.get(sourceRefObj);
                if(subsforSourceRef.size() == 1){
                    apiStgforSourceRef.Subscription_Id__c = subsforSourceRef[0].Id;
                    mapFinalStagingData.put(apiStgforSourceRef.Id, apiStgforSourceRef);
                }else{
                    Id ParentSubId;
                    for(SBQQ__Subscription__c  subObj : subsforSourceRef ){
                        if(String.isBlank(subObj.SBQQ__SegmentKey__c) ){//Non-MDQ
                            if( String.isBlank(subObj.Renewed_Subscription_Id__c) && String.isBlank(subObj.SBQQ__RevisedSubscription__c)){//#ToDo
                                ParentSubId = subObj.id;
                            }else if( !String.isBlank(subObj.Renewed_Subscription_Id__c)){
                                ParentSubId = subObj.Renewed_Subscription_Id__c;
                            }
                        }else if(! String.isBlank(subObj.SBQQ__SegmentKey__c)){//MDQ  
                                ParentSubId = subObj.Id;                        
                               // if(ParentSubId==null){                                  
                               // }
                        
                                if (MDQSubsMap.containsKey(subObj.SBQQ__SegmentKey__c))
                                {
                                    MDQSubsMap.get(subObj.SBQQ__SegmentKey__c).add(subObj);                 
                                }else {
                                    MDQSubsMap.put(subObj.SBQQ__SegmentKey__c , new List<SBQQ__Subscription__c>{subObj} );
                                }
                        }
                    }
                    apiStgforSourceRef.Subscription_Id__c = ParentSubId;
                    mapFinalStagingData.put(apiStgforSourceRef.Id, apiStgforSourceRef);
                    system.debug('ParentSubId=='+ParentSubId);
                }
                scopeNewAPIStaging.add(apiStgforSourceRef);
                
        }
        /////////////////////////
        system.debug('AffSourceRefids'+AffSourceRefids);
        // Step - Populate Affiliate id from Source Ref Id
        String aff_StatusFilter = 'Active';     
        String affsoqlAll =
            'select ' +
            String.join(afffields, ',') +          
            ' from Affiliate_Details__c ' +
            ' where Source_Reference__c IN:allSourceRefids and Status__c =:aff_StatusFilter and Contract__r.RecordType.DeveloperName IN :contractRecType';
        lstAfflsAll = Database.query(String.escapeSingleQuotes(affsoqlAll));
        
        // Step - Load Affiliates to  Maps
        for(Affiliate_Details__c affObj : lstAfflsAll) {
                //mapAffsreftoStaging.put(ast.Source_Ref_ID__c, ast);
                //Map sourceref to staging rec
                if (mapAllreftoStaging.containsKey(affObj.Source_Reference__c )){
                    mapAffsreftoStaging.put(affObj.Source_Reference__c , mapAllreftoStaging.get(affObj.Source_Reference__c )); 
                }
                
                if (mapSourceReftoAffLst.containsKey(affObj.Source_Reference__c))
                {
                    mapSourceReftoAffLst.get(affObj.Source_Reference__c).add(affObj);                   
                }else {
                    mapSourceReftoAffLst.put(affObj.Source_Reference__c , new List<Affiliate_Details__c>{affObj} );
                }           
        }
               
        
        for(String sourceRefObj : mapSourceReftoAffLst.keySet()) {
                List<Affiliate_Details__c> apiStgforSourceRef = mapSourceReftoAffLst.get(sourceRefObj);
                API_Staging_Table__c affforSourceRef = mapAffsreftoStaging.get(sourceRefObj);
                if(apiStgforSourceRef.size() == 1){
                    affforSourceRef.Affiliate_Detail__c = apiStgforSourceRef[0].Id;
                    mapFinalStagingData.put(affforSourceRef.Id, affforSourceRef);
                }else{
                    Id ParentAffId;
                    for(Affiliate_Details__c  apiObj : apiStgforSourceRef ){
                        if(affforSourceRef.Actual_Effective_date__c >= apiObj.Bill_Start_Date__c && affforSourceRef.Actual_Effective_date__c <= apiObj.Bill_End_Date__c ){
                            ParentAffId = apiObj.Id;                            
                        }
                    }
                    if(ParentAffId!=null ){
                        affforSourceRef.Affiliate_Detail__c = ParentAffId;
                        mapFinalStagingData.put(affforSourceRef.Id, affforSourceRef);
                    }
                }
                scopeNewAPIStaging.add(affforSourceRef);
        }
        /////////////////////////

        //Create Maps - subsToAPIRecordMap , AffsToAPIRecordMap 
        // Step - Load Staging Data to maps 
        for (API_Staging_Table__c ast : scopeNewAPIStaging) {
            if (ast.Status__c.equals(this.status) != true) {
                continue;
            }
            
            if(ast.Subscription_Id__c!=null){ 
                if (subsToAPIRecordMap.get(ast.Subscription_Id__c) == null) {
                    subsToAPIRecordMap.put(ast.Subscription_Id__c, ast);
                } else {
                    if (ast.CreatedDate > subsToAPIRecordMap.get(ast.Subscription_Id__c).CreatedDate) {
                        apiDuplicates.add(subsToAPIRecordMap.get(ast.Subscription_Id__c));
                        subsToAPIRecordMap.put(ast.Subscription_Id__c, ast);
                    } else {
                        apiDuplicates.add(ast);
                    }
                }
            }
            system.debug('subsToAPIRecordMap'+subsToAPIRecordMap);
            
            if(ast.Affiliate_Detail__c!=null){ //#OracleAPR
                if (AffsToAPIRecordMap.get(ast.Affiliate_Detail__c) == null) {
                    AffsToAPIRecordMap.put(ast.Affiliate_Detail__c, ast);
                } else {
                    if (ast.CreatedDate > AffsToAPIRecordMap.get(ast.Affiliate_Detail__c).CreatedDate) {
                        apiDuplicates.add(AffsToAPIRecordMap.get(ast.Affiliate_Detail__c));
                        AffsToAPIRecordMap.put(ast.Affiliate_Detail__c, ast);
                    } else {
                        apiDuplicates.add(ast);
                    }
                }
            }
            
            /*if(ast.Affiliate_Detail__c!=null){ //#OracleAPR
                if (ast.CreatedDate > AffsToAPIRecordMap.get(ast.Affiliate_Detail__c).CreatedDate) {
                        AffsToAPIRecordMap.put(ast.Affiliate_Detail__c, ast);
                    } 
            }*/
        }
        ////////////////#-IdentifyDuplicates - start -----------//////
        List<API_Staging_Table__c> existingAPIStagingRecords = [
            SELECT id, CreatedDate, Status__c, Subscription_Id__c
            FROM API_Staging_Table__c
            WHERE
                id NOT IN :scope
                AND Status__c = :status
                AND Actual_Effective_date__c > :dtDate
                AND Subscription_Id__c IN :subsToAPIRecordMap.keySet()
        ];
        //Removed =  Actual_Effective_date__c >= :dtDate
        system.debug('existingAPIStagingRecords'+existingAPIStagingRecords);
        for (API_Staging_Table__c esr : existingAPIStagingRecords) {
            if (esr.CreatedDate < subsToAPIRecordMap.get(esr.Subscription_Id__c).CreatedDate) {
                apiDuplicates.add(esr);
            }
        }
        system.debug('apiDuplicates'+apiDuplicates);    
        for (API_Staging_Table__c esr : apiDuplicates) {
            esr.Description__c = Label.Staging_API_Warning_Same_Subscription;
            esr.Status__c = 'Warning';
            apiToUpdateList.add(esr);
        }
        ////////////////#-IdentifyDuplicates - End -----------//////
        
        //To change the API staging record as 'In Progress'
        system.debug('subsToAPIRecordMap2'+subsToAPIRecordMap);
        
        for (API_Staging_Table__c ast : subsToAPIRecordMap.values()) {
            setPricebookEntryId.add(ast.Subscription_Id__r.PricebookEntry_Id__c);
            ast.Status__c = 'In Progress';
            apiToUpdateList.add(ast);
            subsToAPIRecordMap.put(ast.Subscription_Id__c, ast);
        }
        for (API_Staging_Table__c ast : AffsToAPIRecordMap.values()) {
            ast.Status__c = 'In Progress';
            apiToUpdateList.add(ast);
            AffsToAPIRecordMap.put(ast.Subscription_Id__c, ast);
        }
        update apiToUpdateList;
        
        ////////////////#-Identify Pricebookentry records - Start -----------//////
        //Pricebookentry records associated with Subscription.
        pbeRecord = [
            SELECT Id, OG_Price__c, OG_Currency__c, UnitPrice, CurrencyIsoCode, Product2.Id
            FROM PricebookEntry
            WHERE Id IN :setPricebookEntryId
        ];
        for (PricebookEntry pbe : pbeRecord) {
            mapPricebookEntry.put(pbe.Id, pbe);
        }
        ////////////////#-Identify Pricebookentry records - End -----------//////
        
        //Step - Query the Parent and child Subscriptions
        
        Set<String> subsToAPIRecordMapId = subsToAPIRecordMap.keySet();
        String subsoql =
            'select ' +
            String.join(subsfields, ',') +
            /*',(SELECT ' +
            String.join(subsfields, ',') +        //Splited the sub query into 2 parts for better performance. QPA-25037
            ' id, SBQQ__Quantity__c, SBQQ__RevisedSubscription__c, Calculated_List_Price__c, SBQQ__Discount__c, SBQQ__StartDate__c, RGA_Discount__c, Native_Price_Before_RGA__c, Native_Net_Unit_Price__c, List_Price__c, PricebookEntry_Id__c, SBQQ__ProrateMultiplier__c, Benchmark_Price__c, Price_Achievement__c '+
            ' from SBQQ__Revisions__r)' +*/
            ' from SBQQ__Subscription__c' +
            ' where ID IN:subsToAPIRecordMapId And SBQQ__Contract__r.deal_Type__c = :comm and SBQQ__Contract__r.RecordType.DeveloperName IN :contractRecType';
        lstSubs = Database.query(String.escapeSingleQuotes(subsoql));
        // QPA-25037 Starts - Performing Sub query separately to fetch child subs list.
        string childSoql =  'select ' +
            String.join(subsfields, ',') +
            ' from SBQQ__Subscription__c' +
            ' where SBQQ__RevisedSubscription__c IN:subsToAPIRecordMapId And SBQQ__Contract__r.deal_Type__c = :comm and SBQQ__Contract__r.RecordType.DeveloperName IN :contractRecType';
                        
        
        // Step - Query Affiliates      
        Set<String> AffsToAPIRecordMapId = AffsToAPIRecordMap.keySet(); //#OracleAPR
        String affStatusFilter = 'Active';
        String affsoql =
            'select ' +
            String.join(afffields, ',') +          
            ' from Affiliate_Details__c ' +
            ' where ID IN:AffsToAPIRecordMapId and Status__c =:affStatusFilter and Contract__r.RecordType.DeveloperName IN :contractRecType';
        lstAffls = Database.query(String.escapeSingleQuotes(affsoql));
        // Step - Query Junction object Segment allocation fot all affiliates   
        String segAllforAffsoql =
            'select ' +
            'Subscription__r.RecordType.Name,Subscription__r.SBQQ__SegmentKey__c, Subscription__r.SBQQ__StartDate__c, Subscription__r.SBQQ__EndDate__c,' +
            String.join(segAllocfields, ',') +          
            ' from Segment_Allocation_Detail__c   ' +
            ' where Affiliate_Detail__c IN:AffsToAPIRecordMapId';
        lstSegAlloc = Database.query(String.escapeSingleQuotes(segAllforAffsoql));
        
        ////////////////#-MAP - Segment Alloc -----------//////
        for(Segment_Allocation_Detail__c segAlloc : lstSegAlloc){   
            mapSegAllocAff.put(segAlloc.Id, segAlloc.Affiliate_Detail__c);
            SubIdsforSegmentAllocSet.add(segAlloc.Subscription__c);
        }  

        // Step - Query Subscriptions for Junction object Segment allocations   
        String segSubsoql =
            'select ' +
            String.join(subsfields, ',') +            
            ' from SBQQ__Subscription__c' +
            ' where ID IN:SubIdsforSegmentAllocSet And SBQQ__Contract__r.deal_Type__c = :comm and SBQQ__Contract__r.RecordType.DeveloperName IN :contractRecType';
        lstSegAllocSubs = Database.query(String.escapeSingleQuotes(segSubsoql));
        for(SBQQ__Subscription__c  segAllocSub : lstSegAllocSubs){    
            mapSegAllocSubs.put(segAllocSub.Id, segAllocSub); 
        }
        
        String segAllforSubsoql =
            'select ' +
            'Subscription__r.RecordType.Name,Subscription__r.SBQQ__StartDate__c, Subscription__r.SBQQ__EndDate__c,' +
            String.join(segAllocfields, ',') +          
            ' from Segment_Allocation_Detail__c   ' +
            ' where Subscription__c IN:SubIdsforSegmentAllocSet';
        List<Segment_Allocation_Detail__c> lstSegAllocforSub = Database.query(String.escapeSingleQuotes(segAllforSubsoql));




























for(Segment_Allocation_Detail__c segAlloc : lstSegAllocforSub){   
            if(mapSubstoAffiliate.containsKey(segAlloc.Subscription__c)){
                Map<Id,Decimal> mapSubtoAff = mapSubstoAffiliate.get(segAlloc.Subscription__c);
                mapSubtoAff.put(segAlloc.id, segAlloc.Allocation_Amount__c);
                mapSubstoAffiliate.put(segAlloc.Subscription__c, mapSubtoAff);
            }else{
                Map<Id,Decimal> mapSubtoAff = new Map<Id,Decimal>();
                mapSubtoAff.put(segAlloc.id, segAlloc.Allocation_Amount__c);
                mapSubstoAffiliate.put(segAlloc.Subscription__c, mapSubtoAff);
            }
        }
        
        
        ////
            ////////////////#-MAP - Child subs -----------//////
        for(SBQQ__Subscription__c cs : lstchildSubs){                //Iterating over child subs and placing in Map - mapOfPsIdToCsList
            if(mapOfPsIdToCsList.containskey(cs.SBQQ__RevisedSubscription__c)){
                mapOfPsIdToCsList.get(cs.SBQQ__RevisedSubscription__c).add(cs);
            }
            else{
                mapOfPsIdToCsList.put(cs.SBQQ__RevisedSubscription__c, new list<SBQQ__Subscription__c> {cs});
            }
        }// QPA-25037 ends
        String renewalSubsoql =
            'select ' +
            String.join(subsfields, ',') +
            ' from SBQQ__Subscription__c' +
            ' where Renewed_Subscription_Id__c IN: subsToAPIRecordMapId and SBQQ__Contract__r.RecordType.DeveloperName IN :contractRecType';
        renewalSubList = Database.query(String.escapeSingleQuotes(renewalSubsoql));
        
        for (SBQQ__Subscription__c ds : lstSubs) {
            duplicateSubsId.add(ds.Id);
            
            if (MDQSubsMap.containsKey(ds.SBQQ__SegmentKey__c))
            {
                MDQSubsMap.get(ds.SBQQ__SegmentKey__c).add(ds);                 
            }else {
                MDQSubsMap.put(ds.SBQQ__SegmentKey__c , new List<SBQQ__Subscription__c>{ds} );
            }
        }
            for (Segment_Allocation_Detail__c segAlloc : lstSegAlloc) {
                        
                if (AfftoSegAllocMap.containsKey(segAlloc.Affiliate_Detail__c))
                {
                    AfftoSegAllocMap.get(segAlloc.Affiliate_Detail__c).add(segAlloc);                   
                }else {
                    AfftoSegAllocMap.put(segAlloc.Affiliate_Detail__c , new List<Segment_Allocation_Detail__c>{segAlloc} );
                }
            }
        
        /********** Below lines are added for Renewal scenarios ********************/
        ////////////////#-MAP - Renewal subs -----------//////
        if (!renewalSubList.isEmpty()) {
            for (SBQQ__SUbscription__c rs : renewalSubList) {
                renewalSubMap.put(rs.Renewed_Subscription_Id__c, rs);
            }
        }
        system.debug('renewalSubMap=='+renewalSubMap);
        /*******End of Renewal scenarios ***********/

        ////////////////#-MAP - PIStaging records -----------//////
        //Query related PI Rate Staging records - Consumption Rates
         //Query related PI Rate Staging records - Consumption Rates
        List<PI_Rate_Staging__c> piRates = [
          SELECT
            Original_subscription_consumption_rate__c,
            Subscription_Consumption_Schedule__c,
            Calculated_list_price__c,
            Lower_Bound__c,
            Upper_Bound__c,
            Parent_Subscription__c
          FROM PI_Rate_Staging__c
          WHERE Parent_Subscription__c IN :subsToAPIRecordMap.keySet()
          ORDER BY Lower_Bound__c
        ];

        //Map related PI Rate Staging to API Staging
        for (PI_Rate_Staging__c piRate : piRates) {
            if (piRatesMap.get(piRate.Parent_Subscription__c) == null) {
                piRatesMap.put(piRate.Parent_Subscription__c, new List<PI_Rate_Staging__c>());
            }
            piRatesMap.get(piRate.Parent_Subscription__c).add(piRate);
        }

        ////////////////#-MAP - RA Exchange records -----------//////
        List<RA_Exchange_Rate__c> exchangeRate = [
            SELECT Id, Exchange_Rate__c, From_Currency__c, Migration_ID__c, To_Currency__c
            FROM RA_Exchange_Rate__c
        ];
        for (RA_Exchange_Rate__c ex : exchangeRate) {
            fromCurrency.put(ex.From_Currency__c, ex.Exchange_Rate__c);
            toCurrency.put(ex.From_Currency__c, 1 / ex.Exchange_Rate__c);
        }
        apiToUpdateList = new List<API_Staging_Table__c>();//|Oracle
        if (!lstSubs.isEmpty()) {
            for (SBQQ__Subscription__c ps : lstSubs) {
                inactiveSubsCheck = false;
                updatedSourceRefids.add(ps.Source_Reference__c);
                if (ps.SBQQ__TerminatedDate__c != null) {
                    inactiveSubsCheck = true;
                    String errMsg = Label.TERMINATED_SUBSCRIPTION_UPDATE_ERROR;
                    API_Staging_Table__c apiLog = updateAPIStgTableStatus(
                        subsToAPIRecordMap.get(ps.Id).Id,
                        errMsg,
                        'Error'
                    );
                    apiLogList.add(apiLog);
                    continue;
                }
                
                
                ////////////////#-UPDATESUB - RA Exchange records -----------//////
                // #Scenario  - if the existing subscription ended 'yesterday', create a new renewal subscription
                if (ps.SBQQ__EndDate__c == dtDate.addDays(-1)  && ps.SBQQ__SegmentKey__c== null) { //#Subscription Ended yesterday
                    if (renewalSubMap.containsKey(ps.Id) && !duplicateSubsId.contains(renewalSubMap.get(ps.Id).Id)) {
                        if (renewalSubMap.get(ps.Id).Flat_Renewal__c == 'Yes' || Test.isrunningTest()) {
                            SBQQ__Subscription__c s = renewalSubMap.get(ps.Id);
                            s = recalculateSubscription(
                                ps,
                                s,
                                subsToAPIRecordMap.get(ps.Id),
                                mapPricebookEntry,
                                fromCurrency,
                                toCurrency
                            );
                            if (piRatesMap.get(ps.Id) != null) {
                                subRatesMap.put(s.Id, piRatesMap.get(ps.Id));
                            }
                            s.Adjustmend_Mode__c = GlobalVariables.CPQ_SUB_BILLING_ADJUSTMENT_MODE_UPDATE;
                            s.API_Staging_Record__c = subsToAPIRecordMap.get(ps.Id).Id; //#Oracle
                            mapExistingSubUpdate.put(s.Id, s);
                            mapRenewedOldSubId.put(s.Id, ps.Id);
                        } else {
                            //update the API staging tabe that non flat renewal is already exists
                            String errMsg = Label.NON_FLAT_RENEWAL_ERROR_MESSAGE;
                            inactiveSubsCheck = true;
                            API_Staging_Table__c apiLog = updateAPIStgTableStatus(
                                subsToAPIRecordMap.get(ps.Id).Id,
                                errMsg,
                                'Error'
                            );
                            apiLogList.add(apiLog);
                        }
                    } else {
                        String errMsg = Label.NO_ACTIVE_RENEWAL_ERROR_MESSAGE;
                        inactiveSubsCheck = true;
                        API_Staging_Table__c apiLog = updateAPIStgTableStatus(
                            subsToAPIRecordMap.get(ps.Id).Id,
                            errMsg,
                            'Error'
                        );
                        apiLogList.add(apiLog);
                    }
                } else if (ps.SBQQ__StartDate__c >= dtDate && ps.SBQQ__SegmentKey__c== null) { //#Subscription StartDate is future date
                // #Scenario - if the existing subscription ended few days back                   
                   // check if this is a 3rd party price increase
                    if (subsToAPIRecordMap.get(ps.Id).Proposed_Price__c != null) {
                        Decimal proposedPrice = subsToAPIRecordMap.get(ps.Id).Proposed_Price__c;
                        ps.MRR_Unit_Price__c = proposedPrice;
                        ps.Price_Before_RGA__c = ps.RGA_Discount__c != null ? ps.MRR_Unit_Price__c / (1 - ps.RGA_Discount__c / 100) : ps.MRR_Unit_Price__c;
                        if(ps.Native_Currency_2__c != null && ps.CurrencyIsoCode != null && ps.Native_Currency_2__c != ps.CurrencyIsoCode) {
                            ps.Native_Net_Unit_Price__c = ps.MRR_Unit_Price__c * fromCurrency.get(ps.CurrencyIsoCode) * toCurrency.get(ps.Native_Currency_2__c);
                            ps.Native_Price_Before_RGA__c =  ps.Price_Before_RGA__c * fromCurrency.get(ps.CurrencyIsoCode) * toCurrency.get(ps.Native_Currency_2__c);
                        }

                        //ps.List_Price__c = proposedPrice;
                        //ps.Calculated_List_Price__c = proposedPrice;
                        //ps.Benchmark_Price__c = proposedPrice;
                        //ps.SBQQ__NetPrice__c = proposedPrice;
                        ps.API_Staging_Record__c = subsToAPIRecordMap.get(ps.Id).Id;
                        
                        mapExistingSubUpdate.put(ps.Id, ps);
                    } else {
                        SBQQ__Subscription__c s = new SBQQ__Subscription__c();
                        s.Id = ps.Id;
                        //s = ps.clone();
                        s = recalculateSubscription(
                            ps,
                            s,
                            subsToAPIRecordMap.get(ps.Id),
                            mapPricebookEntry,
                            fromCurrency,
                            toCurrency
                        );
                        if (piRatesMap.get(ps.Id) != null) {
                            scRatesToUpdate = recalculateSubscriptionCSRates(
                                scRatesToUpdate,
                                piRatesMap.get(ps.Id)
                            );
                        }

                        s.Adjustmend_Mode__c = GlobalVariables.CPQ_SUB_BILLING_ADJUSTMENT_MODE_UPDATE;
                        s.API_Staging_Record__c = subsToAPIRecordMap.get(ps.Id).Id; //#Oracle
                        mapExistingSubUpdate.put(s.Id, s);
                        if (
                            renewalSubMap.containsKey(ps.Id) && !duplicateSubsId.contains(renewalSubMap.get(ps.Id).Id)
                        ) {
                            SBQQ__Subscription__c sg = renewalSubMap.get(ps.Id);
                            sg = recalculateSubscription(
                                ps,
                                sg,
                                subsToAPIRecordMap.get(ps.Id),
                                mapPricebookEntry,
                                fromCurrency,
                                toCurrency
                            );
                            if (piRatesMap.get(ps.Id) != null) {
                                subRatesMap.put(sg.Id, piRatesMap.get(ps.Id));
                            }

                            sg.Adjustmend_Mode__c = GlobalVariables.CPQ_SUB_BILLING_ADJUSTMENT_MODE_UPDATE;
                            sg.API_Staging_Record__c = subsToAPIRecordMap.get(ps.Id).Id; //#Oracle
                            mapExistingSubUpdate.put(sg.Id, sg);
                        }
                    if(mapOfPsIdToCsList.containskey(ps.id)){       // QPA-25037
                        for(SBQQ__Subscription__c cs : mapOfPsIdToCsList.get(ps.id)){       // QPA-25037
                                SBQQ__Subscription__c s2 = new SBQQ__Subscription__c();
                                s2.Id = cs.Id;
                                s2 = recalculateSubscription(
                                    ps,
                                    s2,
                                    subsToAPIRecordMap.get(ps.Id),
                                    mapPricebookEntry,
                                    fromCurrency,
                                    toCurrency
                                );
                                if (piRatesMap.get(ps.Id) != null) {
                                    subRatesMap.put(s2.Id, piRatesMap.get(ps.Id));
                                }

                                s2.Adjustmend_Mode__c = GlobalVariables.CPQ_SUB_BILLING_ADJUSTMENT_MODE_UPDATE;
                                s2.API_Staging_Record__c = subsToAPIRecordMap.get(ps.Id).Id; //#Oracle
                                mapExistingSubUpdate.put(s2.Id, s2);
                            }
                        }
                    }
                } else if (
                    dtDate >= ps.SBQQ__EndDate__c &&
                    renewalSubMap.containsKey(ps.Id) &&
                    !duplicateSubsId.contains(renewalSubMap.get(ps.Id).Id) && ps.SBQQ__SegmentKey__c== null
                ) {   
                    // #ScenarioHeader - if the existing subscription is completed & renewal exists already      
                    //&&    renewalSubMap.get(ps.Id).SBQQ__StartDate__c <= dtDate
                    
                    //APR - #Scenario - Sub Renewal Date After the year Term - Future Date
                    if( ( renewalSubMap.get(ps.Id).SBQQ__StartDate__c == dtDate) && ps.SBQQ__SegmentKey__c == null){
                        
                            SBQQ__Subscription__c sg = renewalSubMap.get(ps.Id);
                            sg = recalculateSubscription(
                                ps,
                                sg,
                                subsToAPIRecordMap.get(ps.Id),
                                mapPricebookEntry,
                                fromCurrency,
                                toCurrency
                            );
                            if (piRatesMap.get(ps.Id) != null) {
                                subRatesMap.put(sg.Id, piRatesMap.get(ps.Id));
                            }

                            sg.Adjustmend_Mode__c = GlobalVariables.CPQ_SUB_BILLING_ADJUSTMENT_MODE_UPDATE;
                            sg.API_Staging_Record__c = subsToAPIRecordMap.get(ps.Id).Id; //#Oracle
                            mapExistingSubUpdate.put(sg.Id, sg);
                            mapRenewedOldSubId.put(sg.Id, ps.Id);
                        
                    }else if( renewalSubMap.get(ps.Id).SBQQ__StartDate__c<dtDate  && renewalSubMap.get(ps.Id).SBQQ__EndDate__c>dtDate && ps.SBQQ__SegmentKey__c == null){
                        //APR - #Scenario - Sub Renewal in mid of Term - Renewal Date is Past Date                                     
                              /* subToQuantityMap.put(ps.Id, ps.SBQQ__Quantity__c);
                                ps.SBQQ__TerminatedDate__c = dtDate.addDays(-1);
                                mapExistingSubUpdate.put(ps.Id, ps);
                                childSubs.add(ps);*/
                                
                                API_Staging_Table__c stgObj= subsToAPIRecordMap.get(ps.Id);
                                stgObj.Description__c = Label.SUBSCRIPTION_OUTOFANNIVERSARY_UPDATE_ERROR_MESSAGE;
                                stgObj.Status__c = 'Warning';
                                apiToUpdateList.add(stgObj);
            
                                
                                 SBQQ__Subscription__c cs = renewalSubMap.get(ps.Id);
                                /*cs.SBQQ__TerminatedDate__c = dtDate.addDays(-1);
                                cs.API_Staging_Record__c = subsToAPIRecordMap.get(ps.Id).Id;
                                mapExistingSubUpdate.put(cs.Id, cs);
                                childSubs.add(cs);*/
                                
                                parentSubs.add(cs);
                                parentRenewalSubs.add(cs.Id);
                                
                                if (piRatesMap.get(cs.Id) != null) {
                                    usageParentSubs.add(cs.id);
                                }

                                subToQuantityMap.put(cs.Id, cs.SBQQ__Quantity__c);
                                cs.SBQQ__TerminatedDate__c = dtDate.addDays(-1);
                                cs.API_Staging_Record__c = subsToAPIRecordMap.get(ps.Id).Id; //#Oracle
                                mapExistingSubUpdate.put(cs.Id, cs);
                                mapRenewedOldSubId.put(cs.Id, ps.Id);
                                if (renewalSubMap.containsKey(cs.Id) && !duplicateSubsId.contains(renewalSubMap.get(cs.Id).Id)) {
                                    SBQQ__Subscription__c sg = renewalSubMap.get(cs.Id);
                                    sg = recalculateSubscription( 
                                        cs,
                                        sg,
                                        subsToAPIRecordMap.get(ps.Id),
                                        mapPricebookEntry,
                                        fromCurrency,
                                        toCurrency
                                    );
                                    if (piRatesMap.get(cs.Id) != null) {
                                        subRatesMap.put(sg.Id, piRatesMap.get(cs.Id));
                                    }

                                    sg.Adjustmend_Mode__c = GlobalVariables.CPQ_SUB_BILLING_ADJUSTMENT_MODE_UPDATE;
                                    sg.API_Staging_Record__c = subsToAPIRecordMap.get(ps.Id).Id; //#Oracle
                                    mapExistingSubUpdate.put(sg.Id, sg);
                                }
                                if(mapOfPsIdToCsList.containskey(cs.id)){       // QPA-25037
                                    for(SBQQ__Subscription__c cs2 : mapOfPsIdToCsList.get(cs.id)){       // QPA-25037
                                        if (cs2.SBQQ__StartDate__c < dtDate) {
                                            cs2.SBQQ__TerminatedDate__c = dtDate.addDays(-1);
                                            Decimal quan = subToQuantityMap.get(cs.Id) + cs2.SBQQ__Quantity__c;
                                            subToQuantityMap.put(cs.Id, quan);
                                            cs2.API_Staging_Record__c = subsToAPIRecordMap.get(ps.Id).Id; //#Oracle
                                            mapExistingSubUpdate.put(cs2.Id, cs2);
                                        } else {
                                            cs2.SBQQ__TerminatedDate__c = dtDate.addDays(-1);
                                            cs2.API_Staging_Record__c = subsToAPIRecordMap.get(ps.Id).Id;
                                            mapExistingSubUpdate.put(cs2.Id, cs2);
                                            childSubs.add(cs2);
                                        }
                                    }
                                }
                    
                    }
                   
                    
                }else if (
                    dtDate <= ps.SBQQ__EndDate__c &&
                    renewalSubMap.containsKey(ps.Id) &&
                    !duplicateSubsId.contains(renewalSubMap.get(ps.Id).Id) && ps.SBQQ__SegmentKey__c== null
                ){  
                    //APR - #Scenario - Sub Renewal in before/old date before renewal
                        
                        String errMsg = Label.SUBSCRIPTION_OUTOFANNIVERSARY_BEFORERENEWAL_ERROR_MESSAGE;
                        API_Staging_Table__c apiLog = updateAPIStgTableStatus(
                                                            subsToAPIRecordMap.get(ps.Id).Id,
                                                            errMsg,
                                                            'Error'
                                );  
                        apiLogList.add(apiLog);                             

                }
                else if ( ps.SBQQ__SegmentKey__c != null){
                     //&&(dtDate >= ps.SBQQ__StartDate__c || dtDate >= ps.SBQQ__EndDate__c) 
                    //APR - #ScenarioHeader - MDQ Subscription
                    
                    //APR - #Scenario - MDQ Sub completed and subscription ended yesterday 
                     if (ps.SBQQ__EndDate__c == dtDate.addDays(-1)) {                        
                        if (renewalSubMap.containsKey(ps.Id) && !duplicateSubsId.contains(renewalSubMap.get(ps.Id).Id)) {
                            //APR - #Scenario - MDQ Sub Flat Renewal
                            if (renewalSubMap.get(ps.Id).Flat_Renewal__c == 'Yes' || Test.isrunningTest()) {
                                SBQQ__Subscription__c s = renewalSubMap.get(ps.Id);
                                s = recalculateSubscription(
                                    ps,
                                    s,
                                    subsToAPIRecordMap.get(ps.Id),
                                    mapPricebookEntry,
                                    fromCurrency,
                                    toCurrency
                                );
                                if (piRatesMap.get(ps.Id) != null) {
                                    subRatesMap.put(s.Id, piRatesMap.get(ps.Id));
                                }
                                s.Adjustmend_Mode__c = GlobalVariables.CPQ_SUB_BILLING_ADJUSTMENT_MODE_UPDATE;
                                s.API_Staging_Record__c = subsToAPIRecordMap.get(ps.Id).Id; //#Oracle
                                mapExistingSubUpdate.put(s.Id, s);
                                mapRenewedOldSubId.put(s.Id, ps.Id);
                            } else {
                                //APR - #Scenario - MDQ Sub Non-Flat Renewal
                                //update the API staging tabe that non flat renewal is already exists
                                String errMsg = Label.MDQ_NON_FLAT_RENEWAL_ERROR_MESSAGE;
                                inactiveSubsCheck = true;
                                API_Staging_Table__c apiLog = updateAPIStgTableStatus(
                                    subsToAPIRecordMap.get(ps.Id).Id,errMsg,'Error');
                                apiLogList.add(apiLog);
                            }
                        } else {
                            //APR - #Scenario - MDQ Sub No Renewal
                            String errMsg = Label.MDQ_NO_ACTIVE_RENEWAL_ERROR_MESSAGE;
                            inactiveSubsCheck = true;
                            API_Staging_Table__c apiLog = updateAPIStgTableStatus(
                                subsToAPIRecordMap.get(ps.Id).Id,errMsg,'Error');
                            apiLogList.add(apiLog);
                        }
                         
                     }else if( renewalSubMap.containsKey(ps.Id) && renewalSubMap.get(ps.Id).SBQQ__StartDate__c<dtDate  && renewalSubMap.get(ps.Id).SBQQ__EndDate__c>dtDate && renewalSubMap.get(ps.Id).SBQQ__SegmentKey__c == null){
                        //APR - #Scenario - MDQ Sub Renewal in mid of Term - Renewal Date is Past Date                                     
                              
                                
                                API_Staging_Table__c stgObj= subsToAPIRecordMap.get(ps.Id);
                                stgObj.Description__c = Label.SUBSCRIPTION_OUTOFANNIVERSARY_UPDATE_ERROR_MESSAGE;
                                stgObj.Status__c = 'Warning';
                                apiToUpdateList.add(stgObj);
            
                                
                                 SBQQ__Subscription__c cs = renewalSubMap.get(ps.Id);
                                
                                
                                parentSubs.add(cs);
                                parentRenewalSubs.add(cs.Id);
                                
                                if (piRatesMap.get(cs.Id) != null) {
                                    usageParentSubs.add(cs.id);
                                }

                                subToQuantityMap.put(cs.Id, cs.SBQQ__Quantity__c);
                                cs.SBQQ__TerminatedDate__c = dtDate.addDays(-1);
                                cs.API_Staging_Record__c = subsToAPIRecordMap.get(ps.Id).Id; //#Oracle
                                mapExistingSubUpdate.put(cs.Id, cs);
                                mapRenewedOldSubId.put(cs.Id, ps.Id);
                                if (renewalSubMap.containsKey(cs.Id) && !duplicateSubsId.contains(renewalSubMap.get(cs.Id).Id)) {
                                    SBQQ__Subscription__c sg = renewalSubMap.get(cs.Id);
                                    sg = recalculateSubscription( 
                                        cs,
                                        sg,
                                        subsToAPIRecordMap.get(ps.Id),
                                        mapPricebookEntry,
                                        fromCurrency,
                                        toCurrency
                                    );
                                    if (piRatesMap.get(cs.Id) != null) {
                                        subRatesMap.put(sg.Id, piRatesMap.get(cs.Id));
                                    }

                                    sg.Adjustmend_Mode__c = GlobalVariables.CPQ_SUB_BILLING_ADJUSTMENT_MODE_UPDATE;
                                    sg.API_Staging_Record__c = subsToAPIRecordMap.get(ps.Id).Id; //#Oracle
                                    mapExistingSubUpdate.put(sg.Id, sg);
                                }
                                if(mapOfPsIdToCsList.containskey(cs.id)){       // QPA-25037
                                    for(SBQQ__Subscription__c cs2 : mapOfPsIdToCsList.get(cs.id)){       // QPA-25037
                                        if (cs2.SBQQ__StartDate__c < dtDate) {
                                            cs2.SBQQ__TerminatedDate__c = dtDate.addDays(-1);
                                            Decimal quan = subToQuantityMap.get(cs.Id) + cs2.SBQQ__Quantity__c;
                                            subToQuantityMap.put(cs.Id, quan);
                                            cs2.API_Staging_Record__c = subsToAPIRecordMap.get(ps.Id).Id; //#Oracle
                                            mapExistingSubUpdate.put(cs2.Id, cs2);
                                        } else {
                                            cs2.SBQQ__TerminatedDate__c = dtDate.addDays(-1);
                                            cs2.API_Staging_Record__c = subsToAPIRecordMap.get(ps.Id).Id;
                                            mapExistingSubUpdate.put(cs2.Id, cs2);
                                            childSubs.add(cs2);
                                        }
                                    }
                                }
                    
                    }
                     else if (
                    dtDate <= ps.SBQQ__EndDate__c &&
                    renewalSubMap.containsKey(ps.Id) &&
                    !duplicateSubsId.contains(renewalSubMap.get(ps.Id).Id) && ps.SBQQ__SegmentKey__c== null
                    ){
                         //APR - #Scenario - MDQ Sub Renewal before the renewal date    
                            String errMsg = Label.SUBSCRIPTION_OUTOFANNIVERSARY_BEFORERENEWAL_ERROR_MESSAGE;
                            API_Staging_Table__c apiLog = updateAPIStgTableStatus(
                                                                subsToAPIRecordMap.get(ps.Id).Id,
                                                                errMsg,
                                                                'Error'
                                    );  
                            apiLogList.add(apiLog);                             

                    }                    
                     else{
                    //MDQ - Multi-year Subscriptions
                        List<SBQQ__Subscription__c> subsPerQuote = new List<SBQQ__Subscription__c>();                       
                        if(MDQSubsMap.containsKey(ps.SBQQ__SegmentKey__c)){
                            subsPerQuote = MDQSubsMap.get(ps.SBQQ__SegmentKey__c);
                        }
                        
                        Date latestSubStartDate = null; Date latestSubEndDate = null; Date MDQSubStartDate = null; Boolean isMDQTerminated = false;
                        if(subsPerQuote.size()>0){                          
                            SBQQ__Subscription__c LatestSub;
                            for(SBQQ__Subscription__c  subObj :subsPerQuote){
                                 if(subObj.SBQQ__TerminatedDate__c==null &&  subObj.SBQQ__Quantity__c>0){
                                    if(latestSubEndDate == null || latestSubEndDate<subObj.SBQQ__EndDate__c) {
                                        latestSubEndDate = subObj.SBQQ__EndDate__c;
                                        latestSubStartDate = subObj.SBQQ__StartDate__c;
                                        LatestSub = subObj;
                                    }
                                    if(MDQSubStartDate == null || MDQSubStartDate>subObj.SBQQ__StartDate__c) {
                                        MDQSubStartDate = subObj.SBQQ__StartDate__c;
                                    }
                                    
                                                                         
                                 }else if(subObj.SBQQ__TerminatedDate__c!=null ){
                                     isMDQTerminated = true;
                                 }
                            }
                            
                        }
                        
                        if(latestSubEndDate!=null &&  latestSubStartDate!=null && !isMDQTerminated ){
                            // MDQ Renewal wont have   segment key
                             //APR - #Scenario - MDQ Sub Renewal in mid of MDQ Term 
                                if((dtDate<=latestSubEndDate && dtDate>=MDQSubStartDate) || (dtDate<=latestSubEndDate && dtDate<=MDQSubStartDate)){
                                //APR - Scenario-5 - Sub Renewal in mid of MDQ subscription – Invalid
                                //String errMsg = Label.TERMINATED_SUBSCRIPTION_UPDATE_ERROR; // #TBD - Error message //  
                                String errMsg = Label.MDQ_MID_SUBUPDATE_ERROR_MESSAGE;
                                API_Staging_Table__c apiLog = updateAPIStgTableStatus(
                                    subsToAPIRecordMap.get(ps.Id).Id,errMsg,  'Error'  );
                                apiLogList.add(apiLog);
                            }
                        }else if (isMDQTerminated){
                            String errMsg = Label.TERMINATED_SUBSCRIPTION_UPDATE_ERROR;
                                API_Staging_Table__c apiLog = updateAPIStgTableStatus(
                                    subsToAPIRecordMap.get(ps.Id).Id,  errMsg, 'Error'  );
                                apiLogList.add(apiLog);                         
                            
                        }
                        
                     }
                    
                    
                }
                else {
                    parentSubs.add(ps);
                    if (piRatesMap.get(ps.Id) != null) {
                        usageParentSubs.add(ps.id);
                    }

                    subToQuantityMap.put(ps.Id, ps.SBQQ__Quantity__c);
                    ps.SBQQ__TerminatedDate__c = dtDate.addDays(-1);
                    ps.API_Staging_Record__c = subsToAPIRecordMap.get(ps.Id).Id; //#Oracle
                    mapExistingSubUpdate.put(ps.Id, ps);
                    if (renewalSubMap.containsKey(ps.Id) && !duplicateSubsId.contains(renewalSubMap.get(ps.Id).Id)) {
                        SBQQ__Subscription__c sg = renewalSubMap.get(ps.Id);
                        sg = recalculateSubscription( 
                            ps,
                            sg,
                            subsToAPIRecordMap.get(ps.Id),
                            mapPricebookEntry,
                            fromCurrency,
                            toCurrency
                        );
                        if (piRatesMap.get(ps.Id) != null) {
                            subRatesMap.put(sg.Id, piRatesMap.get(ps.Id));
                        }

                        sg.Adjustmend_Mode__c = GlobalVariables.CPQ_SUB_BILLING_ADJUSTMENT_MODE_UPDATE;
                        sg.API_Staging_Record__c = subsToAPIRecordMap.get(ps.Id).Id; //#Oracle
                        mapExistingSubUpdate.put(sg.Id, sg);
                    }
                    if(mapOfPsIdToCsList.containskey(ps.id)){       // QPA-25037
                        for(SBQQ__Subscription__c cs : mapOfPsIdToCsList.get(ps.id)){       // QPA-25037
                            if (cs.SBQQ__StartDate__c < dtDate) {
                                cs.SBQQ__TerminatedDate__c = dtDate.addDays(-1);
                                Decimal quan = subToQuantityMap.get(ps.Id) + cs.SBQQ__Quantity__c;
                                subToQuantityMap.put(ps.Id, quan);
                                cs.API_Staging_Record__c = subsToAPIRecordMap.get(ps.Id).Id; //#Oracle
                                mapExistingSubUpdate.put(cs.Id, cs);
                            } else {
                                cs.SBQQ__TerminatedDate__c = dtDate.addDays(-1);
                                cs.API_Staging_Record__c = subsToAPIRecordMap.get(ps.Id).Id;
                                mapExistingSubUpdate.put(cs.Id, cs);
                                childSubs.add(cs);
                            }
                        }
                    }
                }
            }
        }
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		if (!lstAffls.isEmpty()) {
            
                //system.debug('lstAffls'+lstAffls);  
                //system.debug('AfftoSegAllocMap'+AfftoSegAllocMap);  
                    //system.debug('AfftoSegAllocMap'+AfftoSegAllocMap);  
                Set<Id>  updatedAffiliates = new Set<Id>();     // updatedSourceRefids.add(aff.Source_Reference__c);
                //APR - #ScenarioHeader - Affiliate Renewal      
            for (Affiliate_Details__c  aff : lstAffls) { //Affiliates loop
                system.debug('aff loop'+aff);
                updatedSourceRefids.add(aff.Source_Reference__c);
                    if(AfftoSegAllocMap.containsKey(aff.Id)){
                        List<Segment_Allocation_Detail__c >  segAllocPerAff = AfftoSegAllocMap.get(aff.Id); // Fetch Segment alloc for affiliate
                        Date latestSubStartDate = null; Date latestSubEndDate = null;
                            system.debug('latestSubStartDate'+latestSubStartDate);
                              system.debug('latestSubEndDate'+latestSubEndDate);
                               system.debug('dtDate'+dtDate);
                        for (Segment_Allocation_Detail__c  segAlloc : segAllocPerAff) { //segAlloc loop
                            //Fetch start date & end date of related subscription
                            latestSubStartDate = segAlloc.Subscription__r.SBQQ__StartDate__c;
                            latestSubEndDate = segAlloc.Subscription__r.SBQQ__EndDate__c;
                            
                            if(latestSubStartDate!=null && latestSubEndDate!=null && (String.isBlank(segAlloc.Subscription__r.SBQQ__SegmentKey__c)  )){ //|| !String.isBlank(segAlloc.Subscription__r.SBQQ__SegmentKey__c)
                                
                            //APR - #Scenario - Affiliate Renewal - Renewal Date is Past Date.     latestSubStartDate == dtDate.addDays(+1) || 
                            if( (latestSubStartDate == dtDate)){                                
                                segAlloc.Allocation_Amount__c = AffsToAPIRecordMap.get(aff.Id).Net_Unit_Price__c;
                                mapExistingSegAllocUpdate.put(segAlloc.Id, segAlloc);
                                
                                aff.MRR_Deal_Amount__c = AffsToAPIRecordMap.get(aff.Id).Net_Unit_Price__c;
                                aff.API_Staging_Record__c = AffsToAPIRecordMap.get(aff.Id).Id; //#Oracle
                                mapAffDetailsUpdate.put(aff.Id, aff);
                                
                                Decimal CalculatedNetUnitAmount = recalculateSegAllAmountforSub(segAlloc.Subscription__c, segAlloc.Id, AffsToAPIRecordMap.get(aff.Id).Net_Unit_Price__c, mapSubstoAffiliate );
                                API_Staging_Table__c stagingRecforAff = AffsToAPIRecordMap.get(aff.Id);
                                if(CalculatedNetUnitAmount!=null){
                                    stagingRecforAff.Net_Unit_Price__c = CalculatedNetUnitAmount; // Update total amount before recalculating sub
                                }
                                
                                SBQQ__Subscription__c ps = mapSegAllocSubs.get(segAlloc.Subscription__c);
                                SBQQ__Subscription__c s = new SBQQ__Subscription__c();
                                s.Id = ps.Id;
                                s = recalculateSubscription(
                                    ps,
                                    s,
                                    stagingRecforAff,
                                    null,
                                    fromCurrency,
                                    toCurrency
                                );
                                system.debug('affiliate update '+ s.Id);
                                s.API_Staging_Record__c = AffsToAPIRecordMap.get(aff.Id).Id; //#Oracle
                                mapExistingSubUpdate.put(s.Id, s);
                                system.debug('affiliate update '+ mapExistingSubUpdate);
                                // update segment allocation
                                // rollup data to sub
                                
                            }else{                              
                                API_Staging_Table__c stgObj= AffsToAPIRecordMap.get(aff.Id);
                                stgObj.Description__c = Label.AFFILIATE_OUTOFANNIVERSARY_UPDATE_ERROR_MESSAGE;
                                stgObj.Status__c = 'Error';
                                apiLogList.add(stgObj);                             
                            }
                            
                            }
                            else if( !String.isBlank(segAlloc.Subscription__r.SBQQ__SegmentKey__c) && ( latestSubStartDate == dtDate || (dtDate<latestSubEndDate && dtDate>latestSubStartDate) || (dtDate<latestSubEndDate && dtDate<latestSubStartDate) || (dtDate>latestSubEndDate && dtDate>latestSubStartDate))){
                                 //APR - #Scenario - Affiliate Renewal - Renewal Date in mid of MDQ subscription term
                                //String errMsg = Label.TERMINATED_SUBSCRIPTION_UPDATE_ERROR; // #TBD - Error message
                                if(!updatedAffiliates.contains(aff.Id)){
                                    String errMsg = Label.MDQ_MID_AFFILIATEUPDATE_ERROR_MESSAGE;
                                    API_Staging_Table__c apiLog = updateAPIStgTableStatus(
                                        AffsToAPIRecordMap.get(aff.Id).Id,
                                        errMsg,
                                        'Error'
                                    );
                                    updatedAffiliates.add(aff.Id);
                                    apiLogList.add(apiLog); 
                                }
                                
                            }
                            
                        }
                    

                    }
                    }
        }
               
        if (!usageParentSubs.isEmpty()) {
            List<SBQQ__Subscription__c> usageSubs = getUsageChildSubscriptions(usageParentSubs);
            parentSubs.addAll(usageSubs);
        }
        //create 2 parent subscription
        if (!parentSubs.isEmpty()) {
            for (SBQQ__Subscription__c sub : parentSubs) {
                //cancel parent subscription
                SBQQ__Subscription__c s = new SBQQ__Subscription__c();
                
                API_Staging_Table__c staging ;
                if(parentRenewalSubs.contains(sub.Id) && subsToAPIRecordMap.containsKey(sub.Renewed_Subscription_Id__c)){ //#Oracle
                    staging = subsToAPIRecordMap.get(sub.Renewed_Subscription_Id__c);
                }else if (subsToAPIRecordMap.containsKey(sub.Id)){
                    staging = subsToAPIRecordMap.get(sub.Id);
                }
                
                s = sub.clone();
                s.SBQQ__SubscriptionStartDate__c = dtDate;
                s.SBQQ__RevisedSubscription__c = sub.Id;
                s.SBQQ__TerminatedDate__c = dtDate.addDays(-1);
                s.SBQQ__OrderProduct__c = null;
                s.SBQQ__QuoteLine__c = null;
                s.Parent_Subscription__c = null;
                Decimal qty = subToQuantityMap.get(sub.Id)!= null? -subToQuantityMap.get(sub.Id) : -s.SBQQ__Quantity__c;
                s.SBQQ__Quantity__c = qty; // Populate as per the child subs startdate
                s.Origin__c = 'Annual Price Increase';
                //s.Billing_Status__c = GlobalVariables.CPQ_SUB_BILLING_STATUS_PENDING_SAP_SYNC;
                s.Adjustmend_Mode__c = GlobalVariables.CPQ_SUB_BILLING_ADJUSTMENT_MODE_CREATE;
                if (staging != null) {
                    s.API_Staging_Record__c = staging.Id;
                }
                if (sub.Calculated_List_Price__c != null && sub.SBQQ__Discount__c != null) {
                    s.MRR_Amount_Discount__c =
                        sub.Calculated_List_Price__c *
                        s.SBQQ__Quantity__c *
                        (sub.SBQQ__Discount__c / 100);
                }
                twoNewParentSubs.add(s);
                //create new parent subscription
                SBQQ__Subscription__c s1 = new SBQQ__Subscription__c();
                s1 = sub.clone();
                s1.SBQQ__SubscriptionStartDate__c = dtDate;
                s1.SBQQ__TerminatedDate__c = null;
                s1.SBQQ__OrderProduct__c = null;
                s1.SBQQ__QuoteLine__c = null;
                s1.Adjustmend_Mode__c = GlobalVariables.CPQ_SUB_BILLING_ADJUSTMENT_MODE_CREATE;
                s1.SBQQ__Quantity__c =  subToQuantityMap.get(sub.Id)!= null? subToQuantityMap.get(sub.Id) : s1.SBQQ__Quantity__c; // Populate as per the child subs startdate
                // check if this is a 3rd party price update, then set the proposed price and common API fields
                if (staging!=null && staging.Proposed_Price__c != null) {
                    s1.Origin__c = 'Annual Price Increase';
                    if (staging.Calculated_List_Price__c != null) {
                        s1.Calculated_List_Price__c = staging.Calculated_List_Price__c;
                    }
                    //s1.Billing_Status__c = GlobalVariables.CPQ_SUB_BILLING_STATUS_PENDING_SAP_SYNC;
                    s1.API_Staging_Record__c = staging.Id;
                    // Set new special/proposed price
                    Decimal proposedPrice = staging.Proposed_Price__c;
                    s1.MRR_Unit_Price__c = proposedPrice;
                    s1.Price_Before_RGA__c = sub.RGA_Discount__c != null ? s1.MRR_Unit_Price__c / (1 - sub.RGA_Discount__c / 100) : s1.MRR_Unit_Price__c;
                    if(s1.Native_Currency_2__c != null && s1.CurrencyIsoCode != null && s1.Native_Currency_2__c != s1.CurrencyIsoCode) {
                        s1.Native_Net_Unit_Price__c = s1.MRR_Unit_Price__c * fromCurrency.get(s1.CurrencyIsoCode) * toCurrency.get(s1.Native_Currency_2__c);
                        s1.Native_Price_Before_RGA__c =  s1.Price_Before_RGA__c * fromCurrency.get(s1.CurrencyIsoCode) * toCurrency.get(s1.Native_Currency_2__c);
                    }

                    // set other price fields as per QPA-24391
                    //s1.List_Price__c = proposedPrice;
                    //s1.Calculated_List_Price__c = proposedPrice;
                    //s1.Benchmark_Price__c = proposedPrice;
                    //s1.SBQQ__NetPrice__c = proposedPrice;
                } else if (staging!= null) {
                    s1 = recalculateSubscription(
                        sub,
                        s1,
                        staging,
                        mapPricebookEntry,
                        fromCurrency,
                        toCurrency
                    );
                }

                twoNewParentSubs.add(s1);
            }
        }
        if (!twoNewParentSubs.isEmpty()) {
            insert twoNewParentSubs;
            subsForMRR.addAll(twoNewParentSubs);
            //get the clone source Subscription id map
            for (SBQQ__Subscription__c su : twoNewParentSubs) {
                if (su.SBQQ__TerminatedDate__c == null) {
                    String sourceId = su.getCloneSourceId();
                    oldtoNewParentSubIdMap.put(sourceId, su.Id);
                    createSubsPositionMap.put(sourceId, su);
                }
            }
            for (SBQQ__Subscription__c su : twoNewParentSubs) {
                if (
                    su.SBQQ__TerminatedDate__c == null &&
                    su.Parent_Subscription__c != null &&
                    oldtoNewParentSubIdMap.get(su.Parent_Subscription__c) != null
                ) {
                    String originalSubId = su.Parent_Subscription__c;
                    su.Parent_Subscription__c = oldtoNewParentSubIdMap.get(su.Parent_Subscription__c);
                    mapExistingSubUpdate.put(su.id, su);
                    system.debug(originalSubId);
                    if (piRatesMap.get(originalSubId) != null) {
                        subRatesMap.put(
                            su.Parent_Subscription__c,
                            piRatesMap.get(originalSubId)
                        );
                        clonedUsageSubMap.put(su.getCloneSourceId(), su.Id);
                    }
                }
            }
        }
        if (!clonedUsageSubMap.isEmpty()) {
            cloneSCRates(clonedUsageSubMap);
        }
        if (!createSubsPositionMap.isEmpty()) {
            autoTransferInsertSubsPosFromSubscription(createSubsPositionMap);
        }
        if (!childSubs.isEmpty()) {
            for (SBQQ__Subscription__c sub : childSubs) {
                //cancel the existing child record with opposite quantity
                SBQQ__Subscription__c s = new SBQQ__Subscription__c();
                s = sub.clone();
                s.SBQQ__TerminatedDate__c = dtDate.addDays(-1);
                s.SBQQ__OrderProduct__c = null;
                s.SBQQ__QuoteLine__c = null;
                s.SBQQ__Quantity__c = -(sub.SBQQ__Quantity__c);
                s.Origin__c = 'Annual Price Increase';
                //s.Billing_Status__c = GlobalVariables.CPQ_SUB_BILLING_STATUS_PENDING_SAP_SYNC;
                s.Adjustmend_Mode__c = GlobalVariables.CPQ_SUB_BILLING_ADJUSTMENT_MODE_CREATE;
                if(sub.SBQQ__RevisedSubscription__c!=null){
                s.API_Staging_Record__c = subsToAPIRecordMap.get(sub.SBQQ__RevisedSubscription__c).Id;
                }else if(sub.Renewed_Subscription_Id__c!=null){
                s.API_Staging_Record__c = subsToAPIRecordMap.get(sub.Renewed_Subscription_Id__c).Id;
                }
                
                if (sub.Calculated_List_Price__c != null && sub.SBQQ__Discount__c != null) {
                    s.MRR_Amount_Discount__c =
                        sub.Calculated_List_Price__c *
                        s.SBQQ__Quantity__c *
                        (sub.SBQQ__Discount__c / 100);
                }
                twoNewChildSubs.add(s);
                //create new child subscription with same quantity
                SBQQ__Subscription__c s1 = new SBQQ__Subscription__c();
                s1 = sub.clone();
                s1.SBQQ__TerminatedDate__c = null;
                s1.SBQQ__OrderProduct__c = null;
                s1.SBQQ__QuoteLine__c = null;
                s1.SBQQ__RevisedSubscription__c = oldtoNewParentSubIdMap.get(sub.SBQQ__RevisedSubscription__c);
                API_Staging_Table__c stagingObj;
                if(sub.SBQQ__RevisedSubscription__c!=null){
                stagingObj = subsToAPIRecordMap.get(sub.SBQQ__RevisedSubscription__c);
                }else if(sub.Renewed_Subscription_Id__c!=null){
                stagingObj = subsToAPIRecordMap.get(sub.Renewed_Subscription_Id__c);
                }
                
                s1 = recalculateSubscription(
                    sub,
                    s1,
                    stagingObj,
                    mapPricebookEntry,
                    fromCurrency,
                    toCurrency
                );
                s1.Adjustmend_Mode__c = GlobalVariables.CPQ_SUB_BILLING_ADJUSTMENT_MODE_CREATE;
                twoNewChildSubs.add(s1);
            }
        }
        if (!twoNewChildSubs.isEmpty()) {
            insert twoNewChildSubs;
            subsForMRR.addAll(twoNewChildSubs);
        }
        Database.SaveResult[] existingSubUpdate;
        Database.SaveResult[] existingSegAllocUpdate;
        Database.SaveResult[] existingAffDetailsUpdate;
        system.debug('existingSegAllocUpdate1='+mapExistingSegAllocUpdate);
        system.debug('existingSegAllocUpdate1.1='+mapExistingSubUpdate);
        system.debug('existingSegAllocUpdate1.3='+existingSubUpdate);
        system.debug('existingSegAllocUpdate1.4='+existingSegAllocUpdate);
        system.debug('mapAffDetailsUpdate='+mapAffDetailsUpdate);
        if (!mapExistingSubUpdate.isEmpty()) {
            existingSubUpdate = Database.Update(mapExistingSubUpdate.values(), false);
            if(!mapExistingSegAllocUpdate.isEmpty() ){//#OracleAPR
                existingSegAllocUpdate = Database.Update(mapExistingSegAllocUpdate.values(), false);
            }
            if(!mapAffDetailsUpdate.isEmpty() ){//#OracleAPR
                existingAffDetailsUpdate = Database.Update(mapAffDetailsUpdate.values(), false);
            }
            
            system.debug('existingSegAllocUpdate2='+existingSegAllocUpdate);
            system.debug('existingSegAllocUpdate2.2='+existingSubUpdate);
            if (!subRatesMap.isEmpty()) {
                scRatesToUpdate = recalculateExistingSubscriptionCSRates(scRatesToUpdate, subRatesMap);
            }
            if (!scRatesToUpdate.isEmpty()) {
                upsert scRatesToUpdate;
            }
            subsForMRR.addAll(mapExistingSubUpdate.values());

            if(existingSubUpdate!=null){
                for (Database.SaveResult sr : existingSubUpdate) {
                    system.debug('sr.getId()'+sr.getId());
                    system.debug('subsToAPIRecordMap.containsKey(sr.getId() sr.getId()'+subsToAPIRecordMap.containsKey(sr.getId()));
                    
                    if (sr!=null && sr.isSuccess() && subsToAPIRecordMap.containsKey(sr.getId())) {
                        API_Staging_Table__c apiLog = updateAPIStgTableStatus(
                            subsToAPIRecordMap.get(sr.getId()).Id,
                            null,
                            'Success'
                        );
                        apiLogList.add(apiLog);
                    }
                    system.debug('mapRenewedOldSubId'+mapRenewedOldSubId);
                    system.debug('mapRenewedOldSubId sr.getId()'+sr.getId());
                    system.debug('mapRenewedOldSubId mapRenewedOldSubId.get(sr.getId())'+mapRenewedOldSubId.get(sr.getId()));
                    if (sr.isSuccess() && subsToAPIRecordMap.containskey(mapRenewedOldSubId.get(sr.getId()))) {
                        API_Staging_Table__c apiLog = updateAPIStgTableStatus(
                            subsToAPIRecordMap.get(mapRenewedOldSubId.get(sr.getId())).Id,
                            null,
                            'Success'
                        );
                        apiLogList.add(apiLog);
                    }
                }
            }
            
            Boolean isAffiliateUpdateSuccess = false;
            if(existingAffDetailsUpdate!=null){
                for (Database.SaveResult sr : existingAffDetailsUpdate) {                    
                    if (sr.isSuccess()) {
                        isAffiliateUpdateSuccess = true;
                    }                   
                } 
            }
            
            if(existingSegAllocUpdate!=null){
                Set<id> StagingTableBeingUpdated = new Set<Id>();
                for (Database.SaveResult sr : existingSegAllocUpdate) {
                    
                    if (sr.isSuccess() && mapSegAllocAff.containsKey(sr.getId())) {
                        Id AffiliateId = mapSegAllocAff.get(sr.getId());
                        Id StagingId =  AffsToAPIRecordMap.get(AffiliateId).Id;
                        if(!StagingTableBeingUpdated.contains(StagingId) && isAffiliateUpdateSuccess){//Handle duplicates
                            API_Staging_Table__c apiLog = updateAPIStgTableStatus(
                                StagingId,
                                null,
                                'Success'
                            );
                            apiLogList.add(apiLog);
                            StagingTableBeingUpdated.add(StagingId);
                        }
                    }
                    
                } 
            }
        }
        CPQSubscriptionHelperUtility.updateRenewalOpportunityMRR(subsForMRR);
        
            // #Scenario - If Sourceref is notfound/InActive , update the Staging table with Error Info
            for(String objId: allSourceRefids){
                if(!updatedSourceRefids.contains(objId)){               
                    if(mapAllreftoStaging.containsKey(objId)){
                         API_Staging_Table__c apiLog = updateAPIStgTableStatus(
                         mapAllreftoStaging.get(objId).Id,'The SourceRef Id is notfound/InActive in Subscription/Affiliate','Error');
                            apiLogList.add(apiLog);
                    }
                }
            }
        
        
        if (!apiLogList.isEmpty()) {
            update apiLogList;
        }
        if (!apiToUpdateList.isEmpty()) {
            update apiToUpdateList;
        }
        
        SBQQ.TriggerControl.enable();
    }
